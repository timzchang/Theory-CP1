Terminals unused in grammar

   NOT_TOKEN
   TOKEN_SEMICOLON
   TOKEN_DOUBLEQUOTE
   TOKEN_SINGLEQUOTE
   TOKEN_TRUE
   TOKEN_FALSE
   TOKEN_IF
   TOKEN_AND
   TOKEN_OR
   TOKEN_NOT
   TOKEN_COND
   TOKEN_CONS
   TOKEN_DEFINE
   TOKEN_NULL
   TOKEN_CAR
   TOKEN_CDR
   TOKEN_GT
   TOKEN_LT
   TOKEN_EQ
   TOKEN_GTE
   TOKEN_LTE
   TOKEN_ELSE
   TOKEN_DISPLAY
   TOKEN_LAMBDA
   TOKEN_IDENT
   TOKEN_STRING_LITERAL
   TOKEN_MOD


Grammar

    0 $accept: program $end

    1 program: expr

    2 expr: TOKEN_L_PAREN TOKEN_ADD expr expr TOKEN_R_PAREN
    3     | TOKEN_L_PAREN TOKEN_SUBTRACT expr expr TOKEN_R_PAREN
    4     | TOKEN_L_PAREN TOKEN_DIVIDE expr expr TOKEN_R_PAREN
    5     | TOKEN_L_PAREN TOKEN_MULTIPLY expr expr TOKEN_R_PAREN
    6     | TOKEN_INTEGER_LITERAL


Terminals, with rules where they appear

$end (0) 0
error (256)
NOT_TOKEN (258)
TOKEN_L_PAREN (259) 2 3 4 5
TOKEN_R_PAREN (260) 2 3 4 5
TOKEN_SEMICOLON (261)
TOKEN_DOUBLEQUOTE (262)
TOKEN_SINGLEQUOTE (263)
TOKEN_TRUE (264)
TOKEN_FALSE (265)
TOKEN_IF (266)
TOKEN_AND (267)
TOKEN_OR (268)
TOKEN_NOT (269)
TOKEN_ADD (270) 2
TOKEN_SUBTRACT (271) 3
TOKEN_DIVIDE (272) 4
TOKEN_MULTIPLY (273) 5
TOKEN_COND (274)
TOKEN_CONS (275)
TOKEN_DEFINE (276)
TOKEN_NULL (277)
TOKEN_CAR (278)
TOKEN_CDR (279)
TOKEN_GT (280)
TOKEN_LT (281)
TOKEN_EQ (282)
TOKEN_GTE (283)
TOKEN_LTE (284)
TOKEN_ELSE (285)
TOKEN_DISPLAY (286)
TOKEN_LAMBDA (287)
TOKEN_IDENT (288)
TOKEN_STRING_LITERAL (289)
TOKEN_MOD (290)
TOKEN_INTEGER_LITERAL (291) 6


Nonterminals, with rules where they appear

$accept (37)
    on left: 0
program (38)
    on left: 1, on right: 0
expr (39)
    on left: 2 3 4 5 6, on right: 1 2 3 4 5


state 0

    0 $accept: . program $end

    TOKEN_L_PAREN          shift, and go to state 1
    TOKEN_INTEGER_LITERAL  shift, and go to state 2

    program  go to state 3
    expr     go to state 4


state 1

    2 expr: TOKEN_L_PAREN . TOKEN_ADD expr expr TOKEN_R_PAREN
    3     | TOKEN_L_PAREN . TOKEN_SUBTRACT expr expr TOKEN_R_PAREN
    4     | TOKEN_L_PAREN . TOKEN_DIVIDE expr expr TOKEN_R_PAREN
    5     | TOKEN_L_PAREN . TOKEN_MULTIPLY expr expr TOKEN_R_PAREN

    TOKEN_ADD       shift, and go to state 5
    TOKEN_SUBTRACT  shift, and go to state 6
    TOKEN_DIVIDE    shift, and go to state 7
    TOKEN_MULTIPLY  shift, and go to state 8


state 2

    6 expr: TOKEN_INTEGER_LITERAL .

    $default  reduce using rule 6 (expr)


state 3

    0 $accept: program . $end

    $end  shift, and go to state 9


state 4

    1 program: expr .

    $default  reduce using rule 1 (program)


state 5

    2 expr: TOKEN_L_PAREN TOKEN_ADD . expr expr TOKEN_R_PAREN

    TOKEN_L_PAREN          shift, and go to state 1
    TOKEN_INTEGER_LITERAL  shift, and go to state 2

    expr  go to state 10


state 6

    3 expr: TOKEN_L_PAREN TOKEN_SUBTRACT . expr expr TOKEN_R_PAREN

    TOKEN_L_PAREN          shift, and go to state 1
    TOKEN_INTEGER_LITERAL  shift, and go to state 2

    expr  go to state 11


state 7

    4 expr: TOKEN_L_PAREN TOKEN_DIVIDE . expr expr TOKEN_R_PAREN

    TOKEN_L_PAREN          shift, and go to state 1
    TOKEN_INTEGER_LITERAL  shift, and go to state 2

    expr  go to state 12


state 8

    5 expr: TOKEN_L_PAREN TOKEN_MULTIPLY . expr expr TOKEN_R_PAREN

    TOKEN_L_PAREN          shift, and go to state 1
    TOKEN_INTEGER_LITERAL  shift, and go to state 2

    expr  go to state 13


state 9

    0 $accept: program $end .

    $default  accept


state 10

    2 expr: TOKEN_L_PAREN TOKEN_ADD expr . expr TOKEN_R_PAREN

    TOKEN_L_PAREN          shift, and go to state 1
    TOKEN_INTEGER_LITERAL  shift, and go to state 2

    expr  go to state 14


state 11

    3 expr: TOKEN_L_PAREN TOKEN_SUBTRACT expr . expr TOKEN_R_PAREN

    TOKEN_L_PAREN          shift, and go to state 1
    TOKEN_INTEGER_LITERAL  shift, and go to state 2

    expr  go to state 15


state 12

    4 expr: TOKEN_L_PAREN TOKEN_DIVIDE expr . expr TOKEN_R_PAREN

    TOKEN_L_PAREN          shift, and go to state 1
    TOKEN_INTEGER_LITERAL  shift, and go to state 2

    expr  go to state 16


state 13

    5 expr: TOKEN_L_PAREN TOKEN_MULTIPLY expr . expr TOKEN_R_PAREN

    TOKEN_L_PAREN          shift, and go to state 1
    TOKEN_INTEGER_LITERAL  shift, and go to state 2

    expr  go to state 17


state 14

    2 expr: TOKEN_L_PAREN TOKEN_ADD expr expr . TOKEN_R_PAREN

    TOKEN_R_PAREN  shift, and go to state 18


state 15

    3 expr: TOKEN_L_PAREN TOKEN_SUBTRACT expr expr . TOKEN_R_PAREN

    TOKEN_R_PAREN  shift, and go to state 19


state 16

    4 expr: TOKEN_L_PAREN TOKEN_DIVIDE expr expr . TOKEN_R_PAREN

    TOKEN_R_PAREN  shift, and go to state 20


state 17

    5 expr: TOKEN_L_PAREN TOKEN_MULTIPLY expr expr . TOKEN_R_PAREN

    TOKEN_R_PAREN  shift, and go to state 21


state 18

    2 expr: TOKEN_L_PAREN TOKEN_ADD expr expr TOKEN_R_PAREN .

    $default  reduce using rule 2 (expr)


state 19

    3 expr: TOKEN_L_PAREN TOKEN_SUBTRACT expr expr TOKEN_R_PAREN .

    $default  reduce using rule 3 (expr)


state 20

    4 expr: TOKEN_L_PAREN TOKEN_DIVIDE expr expr TOKEN_R_PAREN .

    $default  reduce using rule 4 (expr)


state 21

    5 expr: TOKEN_L_PAREN TOKEN_MULTIPLY expr expr TOKEN_R_PAREN .

    $default  reduce using rule 5 (expr)
