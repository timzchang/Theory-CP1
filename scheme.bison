/*
Type for YYSTYPE
*/

/*
YYSTYPE for each type of production
*/
/*
Token types
*/
%token	NOT_TOKEN
%token	TOKEN_L_PAREN
%token	TOKEN_R_PAREN
%token	TOKEN_SEMICOLON
%token	TOKEN_DOUBLEQUOTE
%token	TOKEN_SINGLEQUOTE
%token	TOKEN_TRUE
%token	TOKEN_FALSE
%token	TOKEN_IF
%token	TOKEN_AND
%token	TOKEN_OR
%token	TOKEN_NOT
%token	TOKEN_ADD
%token	TOKEN_SUBTRACT
%token	TOKEN_DIVIDE
%token	TOKEN_MULTIPLY
%token	TOKEN_COND
%token	TOKEN_CONS
%token	TOKEN_DEFINE
%token	TOKEN_NULL
%token	TOKEN_CAR
%token	TOKEN_CDR
%token	TOKEN_GT
%token	TOKEN_LT
%token	TOKEN_EQ
%token	TOKEN_GTE
%token	TOKEN_LTE
%token	TOKEN_ELSE
%token	TOKEN_DISPLAY
%token	TOKEN_LAMBDA
%token	TOKEN_IDENT
%token	TOKEN_STRING_LITERAL
%token	TOKEN_MOD
%token	TOKEN_INTEGER_LITERAL
%{
#include <stdio.h>


/*
Manually declare the interface to the scanner generated by flex.
*/

extern char *yytext;
extern int yylex();
extern int yyerror(char *str);

int parser_result = 0;
%}

%%
/*
program		:	stmt_list
			;

stmt_list	:	func_list stmt_list
			|	data_list stmt_list
			|
			;

func_list	:	func func_list
			|
			;

func		:	TOKEN_L_PAREN func_name func TOKEN_R_PAREN
			|	TOKEN_L_PAREN func_name data_list TOKEN_R_PAREN
			|	
			;

func_name	:	TOKEN_TRUE
			| 	TOKEN_FALSE
			|	TOKEN_IF
			|	TOKEN_AND
			|	TOKEN_OR
			|	TOKEN_NOT
			|	TOKEN_ADD
			|	TOKEN_SUBTRACT
			|	TOKEN_DIVIDE
			|	TOKEN_MULTIPLY
			|	TOKEN_COND
			|	TOKEN_CONS
			|	TOKEN_DEFINE
			|	TOKEN_NULL
			|	TOKEN_CAR
			|	TOKEN_CDR
			|	TOKEN_GT
			|	TOKEN_LT
			|	TOKEN_EQ
			|	TOKEN_GTE
			|	TOKEN_LTE
			|	TOKEN_ELSE
			|	TOKEN_DISPLAY
			|	TOKEN_LAMBDA
			|	TOKEN_MOD
			|	TOKEN_IDENT
			;

data_list	:	TOKEN_SINGLEQUOTE TOKEN_L_PAREN list TOKEN_R_PAREN data_list
			|	
			;

list		:	atom list
			|	TOKEN_L_PAREN list TOKEN_R_PAREN list
			|
			;

atom		:	TOKEN_SINGLEQUOTE TOKEN_IDENT
			|	TOKEN_INTEGER_LITERAL
			|	TOKEN_IDENT
			;
*/
/*
program		:	expr
				{parser_result = $1;}
			;	
expr		:	TOKEN_L_PAREN TOKEN_ADD expr expr TOKEN_R_PAREN
				{printf("im adding\n"); $$ = $3 + $4;}
			|	TOKEN_L_PAREN TOKEN_SUBTRACT expr expr TOKEN_R_PAREN
				{$$ = $3 - $4;}
			|	TOKEN_L_PAREN TOKEN_DIVIDE expr expr TOKEN_R_PAREN
				{$$ = $3 / $4;}
			|	TOKEN_L_PAREN TOKEN_MULTIPLY expr expr TOKEN_R_PAREN
				{$$ = $3 * $4;}
			|	TOKEN_INTEGER_LITERAL
				{$$ = atoi(yytext);}
			;
*/
program		: TOKEN_ADD
			;
%%

int yyerror(char *str)
{
	fprintf(stderr,"parse error: %s\n",str);
	return 0;
}
